/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClickEventService } from "../clickEvent.service";
import { ClickEventCreateInput } from "./ClickEventCreateInput";
import { ClickEvent } from "./ClickEvent";
import { ClickEventFindManyArgs } from "./ClickEventFindManyArgs";
import { ClickEventWhereUniqueInput } from "./ClickEventWhereUniqueInput";
import { ClickEventUpdateInput } from "./ClickEventUpdateInput";

export class ClickEventControllerBase {
  constructor(protected readonly service: ClickEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClickEvent })
  async createClickEvent(
    @common.Body() data: ClickEventCreateInput
  ): Promise<ClickEvent> {
    return await this.service.createClickEvent({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        clickCount: true,
        clickedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClickEvent] })
  @ApiNestedQuery(ClickEventFindManyArgs)
  async clickEvents(@common.Req() request: Request): Promise<ClickEvent[]> {
    const args = plainToClass(ClickEventFindManyArgs, request.query);
    return this.service.clickEvents({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        clickCount: true,
        clickedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClickEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clickEvent(
    @common.Param() params: ClickEventWhereUniqueInput
  ): Promise<ClickEvent | null> {
    const result = await this.service.clickEvent({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        clickCount: true,
        clickedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClickEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClickEvent(
    @common.Param() params: ClickEventWhereUniqueInput,
    @common.Body() data: ClickEventUpdateInput
  ): Promise<ClickEvent | null> {
    try {
      return await this.service.updateClickEvent({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          clickCount: true,
          clickedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClickEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClickEvent(
    @common.Param() params: ClickEventWhereUniqueInput
  ): Promise<ClickEvent | null> {
    try {
      return await this.service.deleteClickEvent({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          clickCount: true,
          clickedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
