/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsOptional,
  IsInt,
  Min,
  Max,
  IsDate,
  ValidateNested,
  IsEnum,
} from "class-validator";

import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { Type } from "class-transformer";
import { ScoreCreateNestedManyWithoutUsersInput } from "./ScoreCreateNestedManyWithoutUsersInput";
import { ClickEventCreateNestedManyWithoutUsersInput } from "./ClickEventCreateNestedManyWithoutUsersInput";
import { EnumUserRole } from "./EnumUserRole";

@InputType()
class UserCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  password!: string;

  @ApiProperty({
    required: true,
  })
  @IsJSONValue()
  @Field(() => GraphQLJSON)
  roles!: InputJsonValue;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  totalClicks?: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  lastLogin?: Date | null;

  @ApiProperty({
    required: false,
    type: () => ScoreCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ScoreCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ScoreCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  scores?: ScoreCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => ClickEventCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ClickEventCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ClickEventCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  clickEvents?: ClickEventCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    enum: EnumUserRole,
  })
  @IsEnum(EnumUserRole)
  @IsOptional()
  @Field(() => EnumUserRole, {
    nullable: true,
  })
  role?: "Option1" | null;
}

export { UserCreateInput as UserCreateInput };
