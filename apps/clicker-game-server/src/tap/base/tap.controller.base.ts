/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TapService } from "../tap.service";
import { TapCreateInput } from "./TapCreateInput";
import { Tap } from "./Tap";
import { TapFindManyArgs } from "./TapFindManyArgs";
import { TapWhereUniqueInput } from "./TapWhereUniqueInput";
import { TapUpdateInput } from "./TapUpdateInput";

export class TapControllerBase {
  constructor(protected readonly service: TapService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tap })
  async createTap(@common.Body() data: TapCreateInput): Promise<Tap> {
    return await this.service.createTap({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tapCount: true,
        earnings: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tap] })
  @ApiNestedQuery(TapFindManyArgs)
  async taps(@common.Req() request: Request): Promise<Tap[]> {
    const args = plainToClass(TapFindManyArgs, request.query);
    return this.service.taps({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tapCount: true,
        earnings: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tap(@common.Param() params: TapWhereUniqueInput): Promise<Tap | null> {
    const result = await this.service.tap({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tapCount: true,
        earnings: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTap(
    @common.Param() params: TapWhereUniqueInput,
    @common.Body() data: TapUpdateInput
  ): Promise<Tap | null> {
    try {
      return await this.service.updateTap({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tapCount: true,
          earnings: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTap(
    @common.Param() params: TapWhereUniqueInput
  ): Promise<Tap | null> {
    try {
      return await this.service.deleteTap({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tapCount: true,
          earnings: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
